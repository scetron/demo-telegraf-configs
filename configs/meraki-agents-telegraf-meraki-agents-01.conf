
################################################################
# Agent: telegraf-meraki-agents-01
# 
# Targets:
#     - ap01
################################################################

[global_tags]
telegraf_agent_group = "Meraki Agents"
collector_name = "telegraf-meraki-agents-01"

[agent]
hostname = "telegraf-meraki-agents-01"


################################################################
# Inputs
################################################################


# **************************************************************
# Input - Cisco - SNMP - License
# **************************************************************


# --------------------------------------------------------------
# Input - Cisco - SNMP - License - ap01
# --------------------------------------------------------------

[[inputs.snmp]]
agents = ["ap01"]
community = "${SNMPv2_COMMUNITY}"
interval = "60s"
retries = 3
timeout = "10s"
version = 2

[[inputs.snmp.field]]
name = "license_status"
oid = "CISCO-SMART-LIC-MIB:ciscoSlaRegistrationStatus.0"

[[inputs.snmp.field]]
name = "license_expire_time"
oid = "CISCO-SMART-LIC-MIB:ciscoSlaNextCertificateExpireTime.0"

[inputs.snmp.tags]
collection_method = "snmp"
device = "ap01"
device_id = "2db30b0d-01b9-416a-adfc-99a1d42d697f"
platform = "cisco_meraki"
plugin_pipeline = "cisco-snmp-license"
role = "ap"
site = "mn01"


# **************************************************************
# Input - Cisco - SNMP - Sensor
# **************************************************************


# --------------------------------------------------------------
# Input - Cisco - SNMP - Sensor - ap01
# --------------------------------------------------------------

[[inputs.snmp]]
agents = ["ap01"]
community = "${SNMPv2_COMMUNITY}"
interval = "60s"
retries = 3
timeout = "10s"
version = 2

[[inputs.snmp.table]]
name = "sensor"
[[inputs.snmp.table.field]]
is_tag = true
name = "name"
oid = "ENTITY-MIB::entPhysicalName"

[[inputs.snmp.table.field]]
is_tag = true
name = "type"
oid = "CISCO-ENTITY-SENSOR-MIB::entSensorType"

[[inputs.snmp.table.field]]
is_tag = true
name = "scale"
oid = "CISCO-ENTITY-SENSOR-MIB::entSensorScale"

[[inputs.snmp.table.field]]
is_tag = true
name = "precision"
oid = "CISCO-ENTITY-SENSOR-MIB::entSensorPrecision"

[[inputs.snmp.table.field]]
name = "value"
oid = "CISCO-ENTITY-SENSOR-MIB::entSensorValue"

[[inputs.snmp.table.field]]
name = "status"
oid = "CISCO-ENTITY-SENSOR-MIB::entSensorStatus"

[[inputs.snmp.table]]
name = "sensor_temperature"
[[inputs.snmp.table.field]]
is_tag = true
name = "name"
oid = "CISCO-ENVMON-MIB::ciscoEnvMonTemperatureStatusDescr"

[[inputs.snmp.table.field]]
name = "celcius"
oid = "CISCO-ENVMON-MIB::ciscoEnvMonTemperatureStatusValue"

[[inputs.snmp.table.field]]
name = "status"
oid = "CISCO-ENVMON-MIB::ciscoEnvMonTemperatureState"

[[inputs.snmp.table]]
name = "sensor_fan"
[[inputs.snmp.table.field]]
is_tag = true
name = "name"
oid = "CISCO-ENVMON-MIB::ciscoEnvMonFanStatusDescr"

[[inputs.snmp.table.field]]
name = "status"
oid = "CISCO-ENVMON-MIB::ciscoEnvMonFanState"

[[inputs.snmp.table]]
name = "sensor_psu"
[[inputs.snmp.table.field]]
is_tag = true
name = "name"
oid = "CISCO-ENVMON-MIB::ciscoEnvMonSupplyStatusDescr"

[[inputs.snmp.table.field]]
name = "status"
oid = "CISCO-ENVMON-MIB::ciscoEnvMonSupplyState"

[inputs.snmp.tags]
collection_method = "snmp"
device = "ap01"
device_id = "2db30b0d-01b9-416a-adfc-99a1d42d697f"
platform = "cisco_meraki"
plugin_pipeline = "cisco-snmp-sensor"
role = "ap"
site = "mn01"


################################################################
# Processors
################################################################


# **************************************************************
# Processor - Cisco - Starlark - Sensor Measurements
# **************************************************************

[[processors.starlark]]
source = '''def apply(metric):
    if 'type' in metric.tags:
        sensor_name = metric.tags['name'].lower()
        sensor_type = metric.tags['type'].lower()
        tx_transceiver = 'yes' if 'tx' in sensor_name or 'transmit' in sensor_name else 'no'
        rx_transceiver = 'yes' if 'rx' in sensor_name or 'receive' in sensor_name else 'no'

        # Append well known components
        if rx_transceiver == 'yes' and sensor_type == 'dbm':
            metric.name = 'sensor_transceiver_input'
        elif tx_transceiver == 'yes' and sensor_type == 'dbm':
            metric.name = 'sensor_transceiver_output'
        elif 'transceiver' in sensor_name:
            metric.name = 'sensor_transceiver'
        elif 'power' in sensor_name and 'fan' in sensor_name:
            metric.name = 'sensor_psu_fan'
        elif 'power' in sensor_name and 'supply' in sensor_name and metric.name == 'sensor_fan':
            metric.name = 'sensor_psu_fan'
        elif 'power' in sensor_name:
            metric.name = 'sensor_psu'
        elif 'fan' in sensor_name:
            metric.name = 'sensor_fan'

        # Append well known sensor measurement
        if sensor_type == 'celsius':
            metric.name = '{}_temperature'.format(metric.name)
        elif sensor_type == 'dbm':
            metric.name = '{}_power'.format(metric.name)
        elif sensor_type == 'rpm':
            metric.name = '{}_speed'.format(metric.name)
        elif sensor_type == 'amperes':
            metric.name = '{}_current'.format(metric.name)
        elif sensor_type == 'volts_dc' or sensor_type == 'volts_ac':
            metric.name = '{}_voltage'.format(metric.name)

        # Process the value
        if 'value' in metric.fields:
            metric.fields[sensor_type] = metric.fields['value']
        return metric'''
namepass = ["sensor", "sensor_temperature", "sensor_fan", "sensor_psu"]

[processors.starlark.tagpass]
collection_method = ["snmp"]


# **************************************************************
# Processor - Cisco - Starlark - Sensor Values
# **************************************************************

[[processors.starlark]]
source = '''load("math.star", "math")  # import math
def apply(metric):
    if 'scale' and 'value' in metric.tags:
        scale = int(metric.tags["scale"])
        precision = int(metric.tags["precision"])
        value = metric.fields["value"]
        if value and scale:
            value = value * math.pow(10, scale)
            metric.fields["value"] = value

        if value and precision:
            value = value / math.pow(10, precision)
            metric.fields["value"] = value
    return metric'''
namepass = ["sensor*"]

[processors.starlark.tagpass]
collection_method = ["snmp"]


################################################################
# Outputs
################################################################


# **************************************************************
# Output - Prometheus Output - Prometheus
# **************************************************************

[[outputs.prometheus_client]]
