
################################################################
# Agent: telegraf-meraki-agents-01
# 
# Targets:
#     - ap01
#     - sw01-test
################################################################

[agent]
debug = true
hostname = "telegraf-meraki-agents-01"


################################################################
# Inputs
################################################################


# **************************************************************
# Input - Cisco - SNMP - License
# **************************************************************


# --------------------------------------------------------------
# Input - Cisco - SNMP - License - ap01
# --------------------------------------------------------------

[[inputs.snmp]]
agents = ["10.235.10.25"]
community = "${SNMPv2_COMMUNITY}"
interval = "60s"
retries = 3
timeout = "10s"
version = 2

[[inputs.snmp.field]]
name = "license_status"
oid = "CISCO-SMART-LIC-MIB:ciscoSlaRegistrationStatus.0"

[[inputs.snmp.field]]
name = "license_expire_time"
oid = "CISCO-SMART-LIC-MIB:ciscoSlaNextCertificateExpireTime.0"

[inputs.snmp.tags]
collection_method = "snmp"
device = "ap01"
device_id = "d16029dd-cdb4-43e0-88ea-e77ca8bc5b5c"
platform = "cisco-meraki"
role = "ap"
site = "mn01"


# --------------------------------------------------------------
# Input - Cisco - SNMP - License - sw01-test
# --------------------------------------------------------------

[[inputs.snmp]]
agents = ["10.235.10.5"]
community = "${SNMPv2_COMMUNITY}"
interval = "60s"
retries = 3
timeout = "10s"
version = 2

[[inputs.snmp.field]]
name = "license_status"
oid = "CISCO-SMART-LIC-MIB:ciscoSlaRegistrationStatus.0"

[[inputs.snmp.field]]
name = "license_expire_time"
oid = "CISCO-SMART-LIC-MIB:ciscoSlaNextCertificateExpireTime.0"

[inputs.snmp.tags]
collection_method = "snmp"
device = "sw01-test"
device_id = "e9ef2426-290a-4b1d-bf1f-77fba0976beb"
platform = "cisco-meraki"
role = "sw"
site = "mn01"


################################################################
# Processors
################################################################


# **************************************************************
# Processor - Cisco - Enum - Sensor
# **************************************************************

[[processors.enum]]
namepass = ["sensor"]
[[processors.enum.mapping]]
tag = "\"type\""

[processors.enum.mapping.value_mappings]
1 = "other"
10 = "rpm"
11 = "vmn"
12 = "truthvalue"
13 = "special_enum"
14 = "dBm"
15 = "db"
2 = "unknown"
3 = "volts_ac"
4 = "volts_dc"
5 = "amperes"
6 = "watts"
7 = "hertz"
8 = "celsius"
9 = "percent_rh"

[[processors.enum.mapping]]
tag = "scale"

[processors.enum.mapping.value_mappings]
1 = -24
10 = 3
11 = 6
12 = 9
13 = 12
14 = 15
15 = 18
16 = 21
17 = 24
2 = -21
3 = -18
4 = -15
5 = -12
6 = -9
7 = -6
8 = -3
9 = 0

[[processors.enum.mapping]]
field = "status"

[processors.enum.mapping.value_mappings]
NON_OPERATIONAL = 3
OK = 1
UNAVAILABLE = 2

[processors.enum.tagpass]
collection_method = ["snmp"]


# **************************************************************
# Processor - Cisco - Starlark - Sensor Measurements
# **************************************************************

[[processors.starlark]]
source = '''def apply(metric):
    sensor_name = metric.tags['name'].lower()
    sensor_type = metric.tags['type'].lower()
    tx_transceiver = 'yes' if 'tx' in sensor_name or 'transmit' in sensor_name else 'no'
    rx_transceiver = 'yes' if 'rx' in sensor_name or 'receive' in sensor_name else 'no'

    # Append well known components
    if rx_transceiver == 'yes' sensor_type == 'dbm':
        metric.name = 'sensor_transceiver_input'
    elif tx_transceiver == 'yes' sensor_type == 'dbm':
        metric.name = 'sensor_transceiver_output'
    elif 'transceiver' in sensor_name:
        metric.name = 'sensor_transceiver'
    elif 'power' in sensor_name and 'fan' in sensor_name:
        metric.name = 'sensor_psu_fan'
	elif 'power' in sensor_name and 'supply' in sensor_name and metric.name == 'sensor_fan':
        metric.name = 'sensor_psu_fan'
    elif 'power' in sensor_name:
        metric.name = 'sensor_psu'
    elif 'fan' in sensor_name:
        metric.name = 'sensor_fan'

    # Append well known sensor measurement
    if sensor_type == 'celsius':
        metric.name = '{}_temperature'.format(metric.name)
    elif sensor_type == 'dbm':
        metric.name = '{}_power'.format(metric.name)
    elif sensor_type == 'rpm':
        metric.name = '{}_speed'.format(metric.name)
    elif sensor_type == 'amperes':
        metric.name = '{}_current'.format(metric.name)
    elif sensor_type == 'volts_dc' or sensor_type == 'volts_ac':
        metric.name = '{}_voltage'.format(metric.name)

    # Process the value
    if 'value' in metric.fields:
        metric.fields[sensor_type] = metric.fields.pop('value')
    return metric'''
namepass = ["sensor", "sensor_temperature", "sensor_fan", "sensor_psu"]

[processors.starlark.tagpass]
collection_method = ["snmp"]


# **************************************************************
# Processor - Cisco - Starlark - Sensor Values
# **************************************************************

[[processors.starlark]]
source = '''load("math.star", "math")  # import math
def apply(metric):
    scale = int(metric.tags["scale"])
    precision = int(metric.tags["precision"])
    value = metric.fields["value"]
    if value and scale:
        value = value * math.pow(10, scale)
        metric.fields["value"] = value

    if value and precision:
        value = value / math.pow(10, precision)
        metric.fields["value"] = value
    return metric'''
namepass = ["sensor"]

[processors.starlark.tagpass]
collection_method = ["snmp"]


################################################################
# Outputs
################################################################


# **************************************************************
# Output - Meraki Prom Output - Prometheus
# **************************************************************

[[outputs.prometheus_client]]
listen = "0.0.0.0"
